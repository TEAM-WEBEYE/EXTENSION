"use strict";(self.webpackChunkvoim=self.webpackChunkvoim||[]).push([[555],{"./src/components/baseButton/component.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>BaseButton});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const buttonStyles={gray:"bg-grayscale-200 text-grayscale-900 border-grayscale-300 hover:bg-grayscale-200 hover:border-grayscale-300 hover:text-grayscale-400 ",white:"bg-grayscale-100 text-grayscale-900 border-grayscale-300 hover:bg-grayscale-100 hover:border-grayscale-300 hover:text-grayscale-500",purple:"bg-purple-default text-grayscale-100 border-none hover:bg-purple-light hover:border-none hover:text-grayscale-100",yellow:"bg-yellow-default text-grayscale-900 border-none hover:bg-yellow-light hover:border-none hover:text-grayscale-600",black:"bg-grayscale-900 text-grayscale-100 border-grayscale-800 hover:bg-grayscale-800 hover:border-grayscale-800 hover:text-grayscale-500",dark:"bg-grayscale-800 text-grayscale-100 border-grayscale-800 hover:bg-grayscale-700 hover:border-grayscale-800 hover:text-grayscale-500"},selectedStyles={gray:"bg-grayscale-200 border-purple-default text-grayscale-900",white:"bg-grayscale-100 border-purple-default text-grayscale-900",purple:"bg-purple-default border-purple-default text-grayscale-100",yellow:"bg-yellow-default border-purple-default text-grayscale-900",black:"bg-grayscale-900 border-purple-default text-grayscale-100",dark:"bg-grayscale-800 border-purple-default text-grayscale-100"},baseClasses="rounded-[14px] w-[140px] h-[140px] flex items-center justify-center border-4 border-solid font-24-Regular font-koddi group";function BaseButton({children,onClick,ariaLabel,color="gray",isSelected=!1}){const colorClasses=isSelected?selectedStyles[color]:buttonStyles[color];return react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{className:`${baseClasses} ${colorClasses}`,onClick,"aria-label":ariaLabel,"aria-pressed":isSelected},children)}},"./src/components/baseButton/stories/BaseButton.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllColors:()=>AllColors,SelectedState:()=>SelectedState,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/baseButton/component.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const __WEBPACK_DEFAULT_EXPORT__={title:"Components/BaseButton",component:_component__WEBPACK_IMPORTED_MODULE_1__.S,argTypes:{onClick:{action:"clicked"},color:{control:{type:"select",options:["gray","white","purple","black","yellow","dark"]}},isSelected:{control:"boolean"},ariaLabel:{control:"text"},children:{control:"text"}}},AllColors={render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",flexWrap:"wrap",gap:"12px"}},["gray","white","purple","yellow","black","dark"].map((color=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component__WEBPACK_IMPORTED_MODULE_1__.S,_extends({key:color},args,{color,ariaLabel:`${color} 버튼`}),color)))),args:{isSelected:!1,onClick:()=>{}}},SelectedState={render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",flexWrap:"wrap",gap:"12px"}},["gray","white","purple","yellow","black","dark"].map((color=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component__WEBPACK_IMPORTED_MODULE_1__.S,_extends({key:color},args,{color,isSelected:!0,ariaLabel:`${color} 선택된 버튼`}),color)))),args:{onClick:()=>{}}},__namedExportsOrder=["AllColors","SelectedState"];AllColors.parameters={...AllColors.parameters,docs:{...AllColors.parameters?.docs,source:{originalSource:'{\n  render: (args: React.ComponentProps<typeof BaseButton>) => {\n    const colors: ButtonColor[] = ["gray", "white", "purple", "yellow", "black", "dark"];\n    return <div style={{\n      display: "flex",\n      flexWrap: "wrap",\n      gap: "12px"\n    }}>\n                {colors.map(color => <BaseButton key={color} {...args} color={color} ariaLabel={`${color} 버튼`}>\n                        {color}\n                    </BaseButton>)}\n            </div>;\n  },\n  args: {\n    isSelected: false,\n    onClick: () => {}\n  }\n}',...AllColors.parameters?.docs?.source}}},SelectedState.parameters={...SelectedState.parameters,docs:{...SelectedState.parameters?.docs,source:{originalSource:'{\n  render: (args: React.ComponentProps<typeof BaseButton>) => {\n    const colors: ButtonColor[] = ["gray", "white", "purple", "yellow", "black", "dark"];\n    return <div style={{\n      display: "flex",\n      flexWrap: "wrap",\n      gap: "12px"\n    }}>\n                {colors.map(color => <BaseButton key={color} {...args} color={color} isSelected ariaLabel={`${color} 선택된 버튼`}>\n                        {color}\n                    </BaseButton>)}\n            </div>;\n  },\n  args: {\n    onClick: () => {}\n  }\n}',...SelectedState.parameters?.docs?.source}}}}}]);